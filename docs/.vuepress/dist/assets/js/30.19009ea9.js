(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{304:function(t,n,s){"use strict";s.r(n);var a=s(3),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"原型-继承-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型-继承-class"}},[t._v("#")]),t._v(" 原型/继承/class")]),t._v(" "),n("p",[t._v("原型/继承")]),t._v(" "),n("ul",[n("li",[t._v("对象的"),n("a",{attrs:{href:"%E5%8D%B3%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B"}},[t._v("[prototype]")])]),t._v(" "),n("li",[t._v("函数 prototype(显示原型)")]),t._v(" "),n("li",[t._v("原型链")]),t._v(" "),n("li",[t._v("继承的多种方式\n"),n("ul",[n("li",[t._v("原型链继承")]),t._v(" "),n("li",[t._v("借用构造函数继承")]),t._v(" "),n("li",[t._v("组合借用继承")]),t._v(" "),n("li",[t._v("寄生组合式继承")]),t._v(" "),n("li",[t._v("ES6 的 class 关键字实现继承")])])])]),t._v(" "),n("h2",{attrs:{id:"_1-对象的原型-隐式原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象的原型-隐式原型"}},[t._v("#")]),t._v(" 1. 对象的原型(隐式原型)")]),t._v(" "),n("p",[t._v("在 JS 当中，每个对象中都有一个特殊的内置属性("),n("code",[t._v("[[prototype]]")]),t._v(")/隐式原型，其实就是对于其他对象的引用而已，换句话说就是：这个特殊的内置属性指向着另外一个对象，它也称之为对象的隐式原型。")]),t._v(" "),n("h3",{attrs:{id:"_1-1-查看隐式原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-查看隐式原型"}},[t._v("#")]),t._v(" 1.1 查看隐式原型")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("obj.__proto__")]),t._v(",早期由浏览器实现，兼容性较差")]),t._v(" "),n("li",[n("code",[t._v("Object.getPrototypeOf")]),t._v("方法也能获取到")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" info "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("打印结果如下:")]),t._v(" "),n("p",[t._v("我们从打印结果可以看出，通过"),n("code",[t._v("__proto__")]),t._v("和"),n("code",[t._v("Object.getPrototypeOf")]),t._v("方法，获取的对象应用是同一个")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7461ae9c188417a8733d49cfea0402e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"1663940777873.jpg"}})]),t._v(" "),n("p",[n("code",[t._v("constructor")]),t._v("这个特殊的属性，我们在后面再来剖析，它默认会指向当前的函数对象")]),t._v(" "),n("h3",{attrs:{id:"_1-2-隐式原型有什么用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-隐式原型有什么用"}},[t._v("#")]),t._v(" 1.2 隐式原型有什么用？")]),t._v(" "),n("ol",[n("li",[t._v("当你访问该对象的属性时会触发"),n("code",[t._v("[[GET]]")]),t._v("操作（对象的存取描述符）")]),t._v(" "),n("li",[t._v("当我访问"),n("code",[t._v("info.name")]),t._v("的时候，首先会查找该"),n("code",[t._v("info")]),t._v("对象中，是否有这个属性，有就使用它")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" info "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("如果无法在该"),n("code",[t._v("info")]),t._v("对象中找到，就会沿着该对象的隐式原型"),n("code",[t._v("[[prototype]]")]),t._v("(沿着原型链)，有就使用它。直到查询到“尽头”后，还未找到该属性的值，返回"),n("code",[t._v("undefined")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1. 未找到")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" info1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 隐式原型中找到")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" info2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///后续会讲到是什么")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//100")]),t._v("\n")])])]),n("h2",{attrs:{id:"_2-函数的显示原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数的显示原型"}},[t._v("#")]),t._v(" 2. 函数的显示原型")]),t._v(" "),n("p",[t._v("多年以来，js 中有一种奇怪的行为，一直被“无耻”的滥用，那就是模仿类（早期是面向对象编程的天下）。这种奇怪的“类似类”的行为，就是利用函数的特殊属性，因为所有函数都会有一个显示原型("),n("code",[t._v("prototype")]),t._v(")属性，它会指向另外一个对象，可以通过这一特性变相实现继承。")]),t._v(" "),n("h3",{attrs:{id:"_2-1-查看函数的原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-查看函数的原型"}},[t._v("#")]),t._v(" 2.1 查看函数的原型")]),t._v(" "),n("ul",[n("li",[t._v("所有的函数都一个"),n("code",[t._v("prototype")]),t._v("属性("),n("strong",[t._v("箭头函数除外")]),t._v(")，注意："),n("strong",[t._v("不是对象的__proto__")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有的函数都有 prototype 属性")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" info "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对象没有 prototype 属性")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-2-显示原型有什么用呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-显示原型有什么用呢"}},[t._v("#")]),t._v(" 2.2 显示原型有什么用呢？")]),t._v(" "),n("p",[t._v("最直接的解释："),n("br"),t._v("\n通过"),n("code",[t._v("new")]),t._v("关键字调用的函数("),n("code",[t._v("new Person()")]),t._v(")，创建的对象，最终这个对象的 "),n("code",[t._v("__proto__")]),t._v("/"),n("strong",[t._v("隐式原型")]),t._v("，会指向"),n("code",[t._v("Person.prototype")]),t._v("（"),n("strong",[t._v("函数的显示原型")]),t._v("）这个对象。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("h4",{attrs:{id:"内存表现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存表现"}},[t._v("#")]),t._v(" 内存表现")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e26f956817e40978b0e915a571036b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image.png"}})]),t._v(" "),n("h3",{attrs:{id:"_2-3-构造函数-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-构造函数-类"}},[t._v("#")]),t._v(" 2.3 构造函数(类)")]),t._v(" "),n("p",[t._v("当首字母大写的函数，我们称之为构造函数(社区约定规范)，早期 ES5 模仿类，在 JS 中也可以把"),n("code",[t._v("new Fn()")]),t._v("这种行为称之为"),n("code",[t._v("类")])]),t._v(" "),n("h4",{attrs:{id:"_2-3-1-new-fn-发生了什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-new-fn-发生了什么"}},[t._v("#")]),t._v(" 2.3.1 "),n("code",[t._v("new Fn()")]),t._v(" 发生了什么")]),t._v(" "),n("ol",[n("li",[t._v("创建一个空对象")]),t._v(" "),n("li",[n("code",[t._v("this")]),t._v("指向创建出来的对象")]),t._v(" "),n("li",[t._v("这个对象的隐式原型指向了函数的显示原型，(即"),n("code",[t._v("p1.__proto__ === Person.prototype")]),t._v(")")]),t._v(" "),n("li",[t._v("运行函数体代码")]),t._v(" "),n("li",[t._v("如果没有明确返回一个非空对象，那么返回的就是创建出来的对象")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { name: 'ice', age: 22 }")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),n("h5",{attrs:{id:"内存表现-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存表现-2"}},[t._v("#")]),t._v(" 内存表现")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f39734f88654a278936d7f6d15e50f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image.png"}})]),t._v(" "),n("h4",{attrs:{id:"_2-3-2-显示原型上添加属性-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-显示原型上添加属性-方法"}},[t._v("#")]),t._v(" 2.3.2 显示原型上添加属性/方法")]),t._v(" "),n("p",[t._v("函数的显示原型，是一个对象，我们当然可以在对象上面添加我们自定义属性，思考以下代码")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getDoubleMoney")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//100")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//200")]),t._v("\n")])])]),n("p",[t._v("在构造函数的显示原型上，添加了"),n("code",[t._v("money")]),t._v("属性和"),n("code",[t._v("getDoubleMoney")]),t._v("方法，方法中设计到了"),n("code",[t._v("this")]),t._v("的概念"),n("a",{attrs:{href:"https://juejin.cn/post/7138827972525424676",title:"https://juejin.cn/post/7138827972525424676",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金 this 文章"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("当我们对象自身上没有该"),n("code",[t._v("money")]),t._v("属性和"),n("code",[t._v("getDoubleMoney")]),t._v("方法，就会沿着对象的原型链一直查找，直至找到“尽头”，还未找到则为"),n("code",[t._v("undefined")]),t._v("，其实很明显这些属性/方法，存放在"),n("code",[t._v("Person")]),t._v("函数的原型上")]),t._v(" "),n("p",[n("code",[t._v("p1")]),t._v("对象为"),n("code",[t._v("Person")]),t._v("的实例（instance），即 "),n("code",[t._v("p1.__proto__ === Person.prototype")])]),t._v(" "),n("h5",{attrs:{id:"内存表现-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存表现-3"}},[t._v("#")]),t._v(" 内存表现")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1962fd68ffc461f8d5b18d0df1ebfea~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image.png"}})]),t._v(" "),n("p",[t._v("每个函数都会有"),n("code",[t._v("name")]),t._v("和"),n("code",[t._v("length")]),t._v("属性，"),n("code",[t._v("name")]),t._v("为函数的名称，"),n("code",[t._v("length")]),t._v("为函数的形参个数")]),t._v(" "),n("h5",{attrs:{id:"为什么添加到原型上"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么添加到原型上"}},[t._v("#")]),t._v(" 为什么添加到原型上？")]),t._v(" "),n("p",[t._v("为什么我要添加到原型上？ 我为啥不能把属性/方法写在函数内部呢？")]),t._v(" "),n("p",[t._v("思考以下代码")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" money")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" money\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getDoubleMoney")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'panda'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ice 100")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ice 200")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//panda 200")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//panda 400")]),t._v("\n")])])]),n("p",[t._v("直接说结论：")]),t._v(" "),n("ul",[n("li",[t._v("属性应该写在函数内部，而不是写在原型对象上，因为对于构造函数来说，每个实例对象应该有属于自己的属性，而不是同一个。")]),t._v(" "),n("li",[n("strong",[t._v("公共方法")]),t._v("应该放在构造函数的原型上，因为"),n("strong",[t._v("可以复用")]),t._v("。当我创建一个实例都会运行构造函数，我创建多个实例，那么就要调用多次。如果方法在函数体中，调用多次构造函数，方法就会被定义多次，这样其实是没有必要的。(多次调用、多次定义、浪费性能)")])]),t._v(" "),n("h3",{attrs:{id:"_2-4-constructor-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-constructor-属性"}},[t._v("#")]),t._v(" 2.4 constructor 属性")]),t._v(" "),n("p",[t._v("我们无论是前面打印原型对象，还是查看内存表现图，多次提到了"),n("code",[t._v("constructor")]),t._v("，那"),n("code",[t._v("constructor")]),t._v("到底是什么呢？")]),t._v(" "),n("ul",[n("li",[t._v("每个原型对象上都有一个"),n("code",[t._v("constructor")]),t._v("，它默认指向了当前的函数，形成循环引用，V8 引擎 GC 采用标记清除算法，不会存在内存泄漏问题")]),t._v(" "),n("li",[n("code",[t._v("Person.prototype.constructor === Person")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// person")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-5-重写函数的显示原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-重写函数的显示原型"}},[t._v("#")]),t._v(" 2.5 重写函数的显示原型")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" money")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" money\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重写了显示原型，是一个全新的对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//200")]),t._v("\n")])])]),n("ul",[n("li",[t._v("我们之前采用赋值的方式，是添加属性的方式添加方法，即"),n("code",[t._v("Person.prototype.getDoubleMoney = function() {}")]),t._v(" ，这是相当于在原对象上添加")]),t._v(" "),n("li",[t._v("这个案例是，是直接赋值了一个新对象，在内存中的表现为，指向了另外一个对象，而不是默认的显示原型了。")])]),t._v(" "),n("h4",{attrs:{id:"探究-constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#探究-constructor"}},[t._v("#")]),t._v(" 探究 constructor")]),t._v(" "),n("p",[t._v("上面的案例中我们把函数的原型进行了"),n("strong",[t._v("重写")]),t._v("的操作，你们有思考过"),n("code",[t._v("constructor")]),t._v("属性吗，原来的原型已经被我重写，赋值为一个全新的对象了，那这个全新的对象"),n("code",[t._v("constructor")]),t._v("又指向谁了呢？\n绕来绕去都快被绕晕了，什么乱七八糟的！接下来跟我一起探究")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" money")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" money\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("为什么指向的却是 Object 呢？难道是 bug 吗？其实并不是，原型/原型链/继承都是环环相扣，一环扣着一环，一个点没吃透，剩下的就很难明白。")]),t._v(" "),n("h4",{attrs:{id:"继续推断探究"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继续推断探究"}},[t._v("#")]),t._v(" 继续推断探究")]),t._v(" "),n("ul",[n("li",[t._v("探索"),n("code",[t._v("Person.prototype.constructor === Object")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*解: Person.prototype.constructor === Object\n      1. 首先我们对原对象进行了重写\n      2. 每个原型对象上都有constructor属性，我们赋值的那个对象身上肯定也有原型对象啊！\n        Person.prototype = { getDoubleMoney () { return this.money * 2 } }\n      3. 此时的Person.prototype = {}，等于了一个全新的对象，并不用关心里面的方法getDoubleMoney\n      4. 伪代码: const obj = {}（字面量写法） 等同于 const obj = new Object()，所以obj对象的隐式原型即（obj.__proto__ === Object.prototype），obj为Object的实例对象。\n      5. 我们赋值的新对象的隐式原型指向了Object.prototype,所以Person.prototype.constructor去查找constructor的时候，自己没有constructor，找到的其实Object.prototype.constructor,所以它的值等于Object\n      6. js中的一句话：万物皆对象(虽然不严谨)，因为Object.prototype是"尽头"，在查找就等于null了\n*/')]),t._v("\n")])])]),n("h4",{attrs:{id:"自定义-constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-constructor"}},[t._v("#")]),t._v(" 自定义 constructor")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" money")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" money\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoubleMoney")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'constructor'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("writable")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("configurable")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("enumerable")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("这样才是正确重写函数显示原型的正确方法，跟默认提供的显示原型一致")]),t._v(" "),n("h2",{attrs:{id:"_3-函数的隐式原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数的隐式原型"}},[t._v("#")]),t._v(" 3. 函数的隐式原型")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("函数是一个函数，（写累了就开始水文章，说废话了是吧？），但它也是一个特殊的对象。函数就像我们人类一样，在生活中，扮演着许多角色(身份)。")])]),t._v(" "),n("li",[n("p",[t._v("函数，既有函数身份，也有对象身份，既然是对象那肯定有隐式原型，我们又绕回来了哈哈哈哈哈哈。")]),t._v(" "),n("p",[t._v("function Person() {}")]),t._v(" "),n("p",[t._v("Person.fullName = 'ice'")]),t._v(" "),n("p",[t._v("console.log(Person.fullName) //ice\nconsole.log(Person."),n("strong",[t._v("proto")]),t._v(" === Function.prototype) //true\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("为什么 "),n("code",[t._v("Person.__proto__ === Function.prototype")]),t._v("相等，在介绍 constructor，我们已经详细的分析过类似的了，其实本质都一样")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Person")]),t._v("作为对象的身份有"),n("code",[t._v("__proto__")]),t._v("，"),n("code",[t._v("Person")]),t._v("则是 "),n("code",[t._v("new Function()")]),t._v("的实例对象，所以"),n("code",[t._v("Person.__proto__ === Function.prototype")])])])]),t._v(" "),n("li",[n("p",[t._v("这里涉及到了原型的继承关系，我们不在这里继续深挖下去，不然不好理解。")])])]),t._v(" "),n("h2",{attrs:{id:"_4-面向对象-es5-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-面向对象-es5-继承"}},[t._v("#")]),t._v(" 4. 面向对象 ES5 -> 继承")]),t._v(" "),n("ul",[n("li",[t._v("举个栗子，把继承抽象成现实的栗子。\n"),n("ul",[n("li",[t._v("首先我们是人类，在生活中我们扮演着各种角色，每个年龄段扮演着不同的角色。当我们读书期间我们扮演着学生这一角色，当我们踏入社会参加工作的那一刻，我们扮演着员工这一角色，如果有幸各位当老板了，扮演着老板这一角色，但是无论扮演着什么角色，我们终究是人类（"),n("strong",[t._v("共性，代码亦是如此，抽取共享，提高代码复用性")]),t._v("）。谁也逃离不了，生老病死，我们要在活着的时候多做一些有意义的事，日行一善，多帮助他人，回馈社会。")])])]),t._v(" "),n("li",[t._v("面向对象之四大特性，我们主要来研究继承，将复用的代码抽取到父类中，子类继承父类直接使用即可，子类可以使用父类中的方法或属性了。\n"),n("ul",[n("li",[t._v("封装")]),t._v(" "),n("li",[t._v("继承")]),t._v(" "),n("li",[t._v("多态")]),t._v(" "),n("li",[t._v("抽象")])])])]),t._v(" "),n("h3",{attrs:{id:"_4-1-原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-原型链"}},[t._v("#")]),t._v(" 4.1 原型链")]),t._v(" "),n("p",[t._v("那 JS 中如何实现继承呢？我们前面说过，其实 JS 中本没“类”，模仿的多了，也就有了“类”，而在 JS 中，实现继承，是逃不开原型链的，因为正是利用原型链这一机制，实现了“类”")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("前面我们已经在对象的隐式原型中，谈到了原型链，现在我们要对它进行剖析了")]),t._v(" "),n("p",[t._v("let info = {\nname: 'ice',\nage: '22'\n}")]),t._v(" "),n("p",[t._v("console.log(info."),n("strong",[t._v("proto")]),t._v(") //Object.prototype")]),t._v(" "),n("p",[t._v("console.log(info."),n("strong",[t._v("proto")]),t._v("."),n("strong",[t._v("proto")]),t._v(") //null\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("最开始说过，一个对象查找属性（key）的时候，首先从自己本身查找，如果有直接返回值（value），如果没有则沿着原型链查找，原型链中有则返回，直至找到“尽头”("),n("code",[t._v("Object.prototype")]),t._v(")，还未找到，则返回 undefined。")]),t._v(" "),n("p",[t._v("let info = {\nname: 'ice',\nage: '22'\n}")]),t._v(" "),n("p",[t._v("info."),n("strong",[t._v("proto")]),t._v(" = {\nmoney: 100\n}")]),t._v(" "),n("p",[t._v("info."),n("strong",[t._v("proto")]),t._v("."),n("strong",[t._v("proto")]),t._v(" = {\nwebsite: 'iceweb.icu'\n}")]),t._v(" "),n("p",[t._v("console.log(info.name) //ice\nconsole.log(info.money) //100\nconsole.log(info.website) //iceweb.icu\nconsole.log(info.girlFriend) // undefined\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("只要你想你可以一直定义对象的隐式原型("),n("code",[t._v("__proto__")]),t._v(")，让它一直查找，（因为"),n("code",[t._v("info")]),t._v("的隐式原型又是一个对象，对象又有隐式原型，这样一直查找下去），这样一层一层像链条一样，所以我们把它称之为"),n("strong",[t._v("原型链")]),t._v("。这就是 JS 中实现继承的本质。")])])]),t._v(" "),n("h4",{attrs:{id:"_4-1-1-查看顶层原型-原型链尽头"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-查看顶层原型-原型链尽头"}},[t._v("#")]),t._v(" 4.1.1 查看顶层原型（原型链尽头）")]),t._v(" "),n("ul",[n("li",[t._v("默认情况下: 顶层原型为"),n("code",[t._v("Object.prototype")]),t._v("，再继续查找下去就为 null 了，也可以说 Object 是所有类的父类")])]),t._v(" "),n("h4",{attrs:{id:"_4-1-2-顶层原型有什么用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-顶层原型有什么用"}},[t._v("#")]),t._v(" 4.1.2 顶层原型有什么用？")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("Object.prototype")]),t._v("有什么用呢？")]),t._v(" "),n("ul",[n("li",[t._v("该对象上默认有许许多多的属性和方法，创建出来的对象继承自"),n("code",[t._v("Object.prototype")]),t._v("，所以通过字面量创建出来的对象/"),n("code",[t._v("new Object()")]),t._v("都能使用顶层原型上的属性和方法。如：toString()...")])]),t._v(" "),n("p",[t._v("const info1 = {\nname: 'ice',\nage: 22\n}")]),t._v(" "),n("p",[t._v("const info2 = new Object({\nname: 'panda',\nage: 20\n})")]),t._v(" "),n("p",[t._v("console.log(info1.name) //ice\nconsole.log(info1.valueOf() === info1) //true\nconsole.log(info1.toString()) //[object Object]")]),t._v(" "),n("p",[t._v("console.log(info2.name) //ice\nconsole.log(info2.valueOf() === info2) //true\nconsole.log(info2.toString()) //[object Object]\n复制代码")])])]),t._v(" "),n("p",[n("strong",[t._v("创建对象的原型图")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03b32cf32f6c416b99dac8bd97126b60~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image.png"}})]),t._v(" "),n("h3",{attrs:{id:"_4-2-实现继承的多种办法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-实现继承的多种办法"}},[t._v("#")]),t._v(" 4.2 实现继承的多种办法")]),t._v(" "),n("h4",{attrs:{id:"_4-2-1-引用赋实现-大聪明做法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-引用赋实现-大聪明做法"}},[t._v("#")]),t._v(" 4.2.1 引用赋实现(大聪明做法)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//父类\nfunction Person() {}\n//在父类\nPerson.prototype.running = function() {\n  console.log(`${this.name} running!!!`)\n}\n\nfunction Student(name, age) {\n  this.name = name\n  this.age = age\n}\n\n//引用赋值，此时子类的原型对象 === 父类的原型对象\nStudent.prototype = Person.prototype\nStudent.prototype.studying = function() {\n  console.log(`${this.name} studying!!!`)\n}\n\nconst ice = new Student('ice', 22)\n\nice.running()\nice.studying()\n\n//ice running!!!\n//ice studying!!!\n复制代码\n")])])]),n("ul",[n("li",[n("p",[t._v("“看起来”好像是实现了继承，确实“使用”子类/父类的方法，但是真的是这样吗？")])]),t._v(" "),n("li",[n("p",[t._v("因为父类与子类用的是一个原型对象，无论我操作子类/父类 它们互相影响")]),t._v(" "),n("p",[t._v("function Person(name, age) {\nthis.name = name\nthis.age = age\n}")]),t._v(" "),n("p",[t._v("Person.prototype.running = function() {\nconsole.log("),n("code",[t._v("${this.name} running!!!")]),t._v(")\n}")]),t._v(" "),n("p",[t._v("function Student(name, age) {\nthis.name = name\nthis.age = age\n}")]),t._v(" "),n("p",[t._v("Student.prototype = Person.prototype\nStudent.prototype.studying = function() {\nconsole.log("),n("code",[t._v("${this.name} studying!!!")]),t._v(")\n}")]),t._v(" "),n("p",[t._v("const p1 = new Person('panda', 20)")]),t._v(" "),n("p",[t._v("//被子类操作后，父类也有了 studying 方法，显然是错误的做法\np1.studying()\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("我们再仔细看，明明"),n("code",[t._v("Person")]),t._v("和"),n("code",[t._v("Stuedent")]),t._v("都有的"),n("code",[t._v("name")]),t._v("/"),n("code",[t._v("age")]),t._v("属性，我们却要定义两遍，我们能不能进行属性复用呢？完了第一个方法的继承都没解决，又来了一个属性复用的问题...,别着急让我们一起来探究~")])])]),t._v(" "),n("h4",{attrs:{id:"_4-2-2-原型链继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-原型链继承"}},[t._v("#")]),t._v(" 4.2.2 原型链继承")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//1. 父类\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n  this.sex = 'male'\n}\n\n//2. 父类显示原型上添加方法\nPerson.prototype.running = function() {\n  console.log(`${this.name} running!!!`)\n}\n\n//3. 子类\nfunction Student(name, age) {\n  this.name = name\n  this.age = age\n}\n\n//4. 创建父类的实例，这个对象`p1.__proto__ === Person.prototype`\nconst p1 = new Person()\n\n//5. 子类显示的原型对象 = p1对象\nStudent.prototype = p1\n\n//6. 在p1对象上添加方法\nStudent.prototype.studying = function() {\n  console.log(`${this.name} studying!!!`)\n}\n\nconst s1 = new Student('ice', 22)\nconsole.log(s1)\nconsole.log(s1.sex)\n\ns1.running()\ns1.studying()\n\n//Person { name: 'ice', age: 22 }\n//male\n//ice running!!!\n//ice studying!!!\n复制代码\n")])])]),n("ul",[n("li",[t._v("这样是初步的实现了继承，但是它们存在几个问题\n"),n("ul",[n("li",[t._v("当我打印 s1 对象的时候，有一些值("),n("code",[t._v("sex")]),t._v(")，是存在 p1 对象上的，我直接打印却查询不到这个属性，但是我通过"),n("code",[t._v("s1.sex")]),t._v("却能访问到，容易产生误解")]),t._v(" "),n("li",[t._v("s1 的类型错误，具体的类型居然为"),n("code",[t._v("Person")]),t._v("，应该是"),n("code",[t._v("Student")]),t._v("类型")]),t._v(" "),n("li",[t._v("没有进行属性的复用，父类有的属性，子类竟然还重复定义了一次")])])])]),t._v(" "),n("p",[n("strong",[t._v("内存表现")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc0fac05ce94e008aa90f209c3b68cc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image.png"}})]),t._v(" "),n("ul",[n("li",[t._v("其本质两点概括\n"),n("ul",[n("li",[t._v("创建了一个全新的对象（"),n("code",[t._v("p1")]),t._v("），且这个对象的隐式原型指向了父类的显示原型")]),t._v(" "),n("li",[t._v("子类的显示原型指向那个新创建来的对象\n"),n("ul",[n("li",[t._v("当我 new 子类的时候，其创建的实例的隐式原型，已经指向了新创建出来的对象（"),n("code",[t._v("p1")]),t._v("），沿着新对象的隐式原型，从而实现了继承")])])])])])]),t._v(" "),n("h4",{attrs:{id:"_4-2-3-借用构造函数继承-经典继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-借用构造函数继承-经典继承"}},[t._v("#")]),t._v(" 4.2.3 借用构造函数继承(经典继承)")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("借用构造函数继承主要解决的问题就是复用父类属性，这里就非常容易理解，废话少说我们直接看代码。")]),t._v(" "),n("p",[t._v("function Person(name, age) {\nthis.name = name\nthis.age = age\n}")]),t._v(" "),n("p",[t._v("function Student(name, age) {\nPerson.apply(this, [name, age])\n}")]),t._v(" "),n("p",[t._v("const s1 = new Student('ice', 22)\nconsole.log(s1)")]),t._v(" "),n("p",[t._v("//{ name: 'ice', age: 22 }\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("借用，其实就是主动的调用一下父类，通过改变 this 的指向，变相的实现父类属性的复用，有关 this 问题就不再赘述了，可以看下我之前写的 this 文章，这里用 apply/call 都可以，传参形式不同而已。")])])]),t._v(" "),n("h4",{attrs:{id:"_4-2-4-组合继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-组合继承"}},[t._v("#")]),t._v(" 4.2.4 组合继承")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("组合继承则是原型链继承+借用构造函数继承的结合")]),t._v(" "),n("p",[t._v("function Person(name, age) {\nthis.name = name\nthis.age = age\n}")]),t._v(" "),n("p",[t._v("Person.prototype.running = function() {\nconsole.log("),n("code",[t._v("${this.name} running!!!")]),t._v(")\n}")]),t._v(" "),n("p",[t._v("function Student(name, age) {\nPerson.apply(this, [name, age])\n}")]),t._v(" "),n("p",[t._v("const p1 = new Person()")]),t._v(" "),n("p",[t._v("Student.prototype = p1")]),t._v(" "),n("p",[t._v('Object.defineProperty(Student.prototype, "constructor", {\nvalue: Student,\nwritable: true,\nconfigurable: false,\nenumerable: false\n})')]),t._v(" "),n("p",[t._v("Student.prototype.studying = function() {\nconsole.log("),n("code",[t._v("${this.name} studying!!!")]),t._v(")\n}")]),t._v(" "),n("p",[t._v("const s1 = new Student('ice', 22)\nconsole.log(s1)")]),t._v(" "),n("p",[t._v("s1.running()\ns1.studying()")]),t._v(" "),n("p",[t._v("// Student { name: 'ice', age: 22 }\n// ice running!!!\n// ice studying!!!\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("组合继承是 js 中最常用的模式之一，到了这里，继承的基本实现已经没有了什么问题了，但是它仍然有一些不完美的地方")])]),t._v(" "),n("li",[n("p",[t._v("缺点:")]),t._v(" "),n("ul",[n("li",[t._v("最大的问题就是，父类都会被调用两次，第一次是构建"),n("code",[t._v("p1")]),t._v("对象的时候，第二次是借用构造函数实现父类属性复用的时候。")])])])]),t._v(" "),n("h4",{attrs:{id:"_4-2-5-原型式继承函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-5-原型式继承函数"}},[t._v("#")]),t._v(" 4.2.5 原型式继承函数")]),t._v(" "),n("ul",[n("li",[t._v("最早为前端著名大神道格拉斯提出，"),n("code",[t._v("JSON")]),t._v("的创立者，对就是前后端进行交互传输的"),n("code",[t._v("JSON")]),t._v(", JS 语言的创始人 Brendan Eich 称道格拉斯为 JS 界的宗师。")]),t._v(" "),n("li",[t._v("与寄生式继承函数类似的一种思想")])]),t._v(" "),n("p",[n("strong",[t._v("1. 兼容性最好的写法")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("function create(obj) {\n  function Fn() {}\n  Fn.prototype = obj\n\n  return new Fn()\n}\n复制代码\n")])])]),n("p",[n("strong",[t._v("2. setPrototypeOf 方法")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("方法设置一个指定的对象的原型")])]),t._v(" "),n("li",[n("p",[t._v("不推荐使用，由于现代 JavaScript 引擎优化属性访问所带来的特性的关系，更改对象的  "),n("code",[t._v("[[Prototype]]")]),t._v("  在各个浏览器和 JavaScript 引擎上都是一个很慢的操作。")]),t._v(" "),n("p",[t._v("function create(obj) {\nlet newObj = {}\nObject.setPrototypeOf(newObj, obj)")]),t._v(" "),n("p",[t._v("return newObj\n}")]),t._v(" "),n("p",[t._v("复制代码")])])]),t._v(" "),n("p",[n("strong",[t._v("3. create 方法")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("function create(obj) {\n  let newObj = Object.create(obj)\n\n  return newObj\n}\n复制代码\n")])])]),n("ul",[n("li",[t._v("方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型"),n("code",[t._v("[[prototype]]")])]),t._v(" "),n("li",[t._v("其本质跟第一种方式没有区别")])]),t._v(" "),n("p",[n("strong",[t._v("4. "),n("code",[t._v("__proto__")]),t._v("写法，不考虑兼容性")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("function create(obj) {\n  let newObj = {}\n  newObj.__proto__ = obj\n\n  return newObj\n}\n复制代码\n")])])]),n("ul",[n("li",[n("strong",[t._v("总结")]),t._v(" "),n("ul",[n("li",[t._v("原型式继承函数的本质\n"),n("ul",[n("li",[t._v("创建一个空对象")]),t._v(" "),n("li",[t._v("这个空对象的隐式原型"),n("code",[t._v("[[prototype]]")]),t._v("，等于父类的显示原型，最后返回这个对象")])])])])])]),t._v(" "),n("h4",{attrs:{id:"_4-2-6-寄生式继承函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-6-寄生式继承函数"}},[t._v("#")]),t._v(" 4.2.6 寄生式继承函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//1. 原型式继承函数\nfunction create(obj) {\n  function Fn() {}\n  Fn.prototype = obj\n  return new Fn()\n}\n\n//父类\nfunction Person() {}\nPerson.prototype.running = function() {\n  console.log('running!!!')\n}\n\n//2. 寄生式继承函数\nfunction createStu(person) {\n  const s1 = create(person)\n\n  s1.studying = function() {\n    console.log('Studying code')\n  }\n  return s1\n}\n\n//3. 子类对象\nconst s1 = createStu(Person.prototype)\ns1.running()\n复制代码\n")])])]),n("ul",[n("li",[t._v("在原型式继承函数的基础上又进行了一次封装，在函数内部来增强对象，最后将这个对象返回")])]),t._v(" "),n("h4",{attrs:{id:"_4-2-7-寄生式组合继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-7-寄生式组合继承"}},[t._v("#")]),t._v(" 4.2.7 寄生式组合继承")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("组合继承是比较理想的继承方案，但是最大的问题最少要调用父构造函数两次，但是寄生式组合继承就能解决这一问题")])]),t._v(" "),n("li",[n("p",[t._v("寄生式组合继承，就成是利用寄生式继承函数(与原型式继承函数类似)，像寄生虫一样，寄生在另外的对象上。")]),t._v(" "),n("p",[t._v("function create(o) {\nfunction F() {}\nF.prototype = o\nreturn new F()\n}\n//1. 创建一个新对象\n//2. 新对象 "),n("strong",[t._v("proto")]),t._v(" 指向父类的 prototype\n//3. 最后返回这个对象")]),t._v(" "),n("p",[t._v("function inherit(SubType, SuperType) {\n//子类的 prototype = 新创建出来的对象\nSubType.prototype = create(SuperType.prototype)\nObject.defineProperty(SubType.prototype, 'constructor', {\nwritable: true,\nconfigurable: false,\nenumerable: false,\nvalue: SubType\n})\n}")]),t._v(" "),n("p",[t._v("//父类\nfunction Person(name, age) {\nthis.name = name\nthis.age = age\n}\n//原型上增加方法\nPerson.prototype.running = function() {\nconsole.log("),n("code",[t._v("${this.name} running!!!")]),t._v(")\n}")]),t._v(" "),n("p",[t._v("//子类\nfunction Student(name, age) {\n//借用构造函数\nPerson.apply(this, [name, age])\n}")]),t._v(" "),n("p",[t._v("//调用 inherit，实现继承\ninherit(Student, Person)")]),t._v(" "),n("p",[t._v("//子类原型上的方法\nStudent.prototype.studying = function() {\nconsole.log("),n("code",[t._v("${this.name} studying!!!")]),t._v(")\n}")]),t._v(" "),n("p",[t._v("//Student 的实例对象\nconst s1 = new Student('ice', 22)")]),t._v(" "),n("p",[t._v("console.log(s1)\ns1.studying()\ns1.running()")]),t._v(" "),n("p",[t._v("//Student { name: 'ice', age: 22 }\n//ice studying!!!\n//ice running!!!\n复制代码")])])]),t._v(" "),n("p",[n("strong",[t._v("总结")])]),t._v(" "),n("ul",[n("li",[t._v("我们绕了一大圈，其实就是通过寄生的方式（中间人模式）\n"),n("ul",[n("li",[t._v("让子类实例的隐式原型，指向了一个新的对象\n"),n("ul",[n("li",[t._v("即 "),n("code",[t._v("子类实例.__proto__ = 子类.prototype = newObject")]),t._v(" "),n("ul",[n("li",[t._v("我们在原型上添加的方法，本质上是添加在这个新对象上的")])])])])]),t._v(" "),n("li",[t._v("这个新的对象的隐式原型指向了父类的显示原型\n"),n("ul",[n("li",[t._v("即 "),n("code",[t._v("newObject.__proto__ = 父类.prototype")]),t._v(" "),n("ul",[n("li",[t._v("这个新对象上的隐式原型("),n("code",[t._v("__proto__")]),t._v(")，就指向了父类的 prototype，从而实现了继承")])])])])])])]),t._v(" "),n("li",[t._v("最早的大聪明做法，我们直接把父类的"),n("code",[t._v("prototype")]),t._v("赋值给了子类的"),n("code",[t._v("prototype")]),t._v(", 它们公用同一个原型，看上去是能实现，但是它们互相影响，因为这么做意味着以后修改了子类型原型对象的某个引用类型的时候, 父类型原生对象的引用类型也会被修改。")])]),t._v(" "),n("h2",{attrs:{id:"_5-原型继承关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-原型继承关系"}},[t._v("#")]),t._v(" 5. 原型继承关系")]),t._v(" "),n("ul",[n("li",[t._v("这是非常经典的一张图，好像已经被分析烂了，但是很多文章感觉分析的不够透彻，可以把这张图一共分为两部分")]),t._v(" "),n("li",[t._v("前面我们已经说过了，函数比较特殊有两种身份，第一种是函数身份，另外一种是对象身份。你是一个对象，你就会有你自己的类，这样说会比较抽象，我们来一起分析，解析之前我们先把图放在旁边，一点一点的查阅。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f9448a0d5b84737860185a6b2e8df2e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"b58117e53b0147e79115fad4fa0a99d8_tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.webp"}})]),t._v(" "),n("h3",{attrs:{id:"_5-1-new-foo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-new-foo"}},[t._v("#")]),t._v(" 5.1 new Foo()")]),t._v(" "),n("p",[t._v("首先就是"),n("code",[t._v("new Foo")]),t._v("出发")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("f1 = new Foo()")]),t._v("\n即 "),n("code",[t._v("f1.__proto__ === Foo.prototype")])]),t._v(" "),n("li",[n("code",[t._v("Foo.prototype")]),t._v("也是一个对象，也有自己的隐式原型\n即 "),n("code",[t._v("Foo.prototype.__proto__ === Object.prototype")]),t._v(" "),n("code",[t._v("Object.prototype")]),t._v('是顶层（"尽头"）, 在继续查找就为 null')]),t._v(" "),n("li",[n("code",[t._v("Foo")]),t._v("函数的"),n("code",[t._v("prototype")]),t._v("则是，"),n("code",[t._v("Foo.prototype")])]),t._v(" "),n("li",[n("code",[t._v("Foo")]),t._v("身为对象身份也有属于自己的"),n("code",[t._v("__proto__")]),t._v(",也有自己的构造函数\n即"),n("code",[t._v("Foo.__proto__ === Function.prototype")]),t._v(" , 因为"),n("code",[t._v("Foo的创建")]),t._v("相当于 "),n("code",[t._v("new Function()")])]),t._v(" "),n("li",[n("code",[t._v("Function.prototype")]),t._v("也是一个对象，它的"),n("code",[t._v("__proto__")]),t._v("为"),n("code",[t._v("Object.prototype")]),t._v("“尽头”，在查找下去为 null")]),t._v(" "),n("li",[n("code",[t._v("Function")]),t._v("也是一个对象，它也有自己的构造函数，但是它也是相当于"),n("code",[t._v("new Function")]),t._v("创建出来的"),n("strong",[t._v("比较特殊")]),t._v("\n即"),n("code",[t._v("Function.__proto__ === Function.prototype")])])]),t._v(" "),n("h3",{attrs:{id:"_5-2-new-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-new-object"}},[t._v("#")]),t._v(" 5.2 new Object()")]),t._v(" "),n("p",[t._v("从 "),n("code",[t._v("new Object()")]),t._v("出发")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("o1 = new Object()")]),t._v("\n即"),n("code",[t._v("o1.__proto__ === Object.prototype")]),t._v(", 因为它是由"),n("code",[t._v("Object")]),t._v("的实例，“尽头”，在沿着__proto__查找，则为 null")]),t._v(" "),n("li",[n("code",[t._v("Object")]),t._v("它的显示原型为"),n("code",[t._v("Object.prototype")]),t._v(",作为对象身份也有自己的"),n("code",[t._v("__proto__")]),t._v("，那它是由谁构建出来的呢？\n即 "),n("code",[t._v("Object.__proto__ === Function.prototype")]),t._v(",它是由函数构建出来的，也可以说它是函数的实例对象")])]),t._v(" "),n("h3",{attrs:{id:"_5-3-内存图分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-内存图分析"}},[t._v("#")]),t._v(" 5.3 内存图分析")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b63e1ee8ba6462194cf8b945c9ae4f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"image.png"}})]),t._v(" "),n("h2",{attrs:{id:"_6-面向对象-es6-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-面向对象-es6-继承"}},[t._v("#")]),t._v(" 6. 面向对象 ES6 -> 继承")]),t._v(" "),n("ul",[n("li",[t._v("我们前面介绍了，通过构造函数的形式来模仿“类”，在 ES6 的新标准中，使用"),n("code",[t._v("class")]),t._v("关键字来定义类")]),t._v(" "),n("li",[t._v("其 class 的本质就是前面构造函数、原型链的那一套东西，就是几个 API 调用而已")])]),t._v(" "),n("h3",{attrs:{id:"_6-1-定义类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-定义类"}},[t._v("#")]),t._v(" 6.1 定义类")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//1. 类申明\nclass Person1 {}\n\n//2. 类表达式\nconst Person2 = class {}\n复制代码\n")])])]),n("h3",{attrs:{id:"_6-2-类与构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-类与构造函数"}},[t._v("#")]),t._v(" 6.2 类与构造函数")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("其本质是跟构造函数一样")]),t._v(" "),n("p",[t._v("class Person {}")]),t._v(" "),n("p",[t._v("const p1 = new Person()")]),t._v(" "),n("p",[t._v("console.log(Person.prototype)\nconsole.log(Person.prototype.constructor)\nconsole.log(p1."),n("strong",[t._v("proto")]),t._v(" === Person.prototype)")]),t._v(" "),n("p",[t._v("//{}\n//[class Person]\n//true\n复制代码")])])]),t._v(" "),n("h3",{attrs:{id:"_6-3-类的构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-类的构造函数"}},[t._v("#")]),t._v(" 6.3 类的构造函数")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果我们希望在创建对象的时候给类传递一些参数，这个时候应该如何做呢？")]),t._v(" "),n("ul",[n("li",[t._v("每个类都可以有一个自己的构造函数（方法），这个方法的名称是固定的 constructor；")]),t._v(" "),n("li",[t._v("当我们通过 new 操作符，操作一个类的时候会调用这个类的构造函数 constructor；")]),t._v(" "),n("li",[t._v("每个类只能有一个构造函数，如果包含多个构造函数，那么会抛出异常；")])]),t._v(" "),n("p",[t._v("class Person {\nconstructor(name, age, money) {\nthis.name = name\nthis.age = age\nthis.money = money\n}")]),t._v(" "),n("p",[t._v("running() {\nconsole.log("),n("code",[t._v("${this.name} running!!!")]),t._v(")\n}\neating() {\nconsole.log("),n("code",[t._v("${this.name} eating!!!")]),t._v(")\n}\n}")]),t._v(" "),n("p",[t._v("const p1 = new Person('ice', 22, 100)\nconsole.log(p1)\np1.running()\np1.eating()")]),t._v(" "),n("p",[t._v("// Person { name: 'ice', age: 22, money: 100 }\n// ice running!!!\n// ice eating!!!\n复制代码")])])]),t._v(" "),n("h3",{attrs:{id:"_6-4-类的实例方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-类的实例方法"}},[t._v("#")]),t._v(" 6.4 类的实例方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("class Person {\n  running() {\n    console.log('running!!!')\n  }\n  eating() {\n    console.log('eating!!!')\n  }\n}\n\nconst p1 = new Person()\n\np1.running()\np1.eating()\n\nconsole.log(p1.running === Person.prototype.running)\nconsole.log(p1.eating === Person.prototype.eating)\n\n// running!!!\n// eating!!!\n// true\n// true\n复制代码\n")])])]),n("ul",[n("li",[t._v("从打印结果我们可以看出，通过类关键字定义的方法，是存放在 Person 的原型对象上的，这样的话可以给多个实例进行共享")])]),t._v(" "),n("h3",{attrs:{id:"_6-5-类的静态方法-类方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-类的静态方法-类方法"}},[t._v("#")]),t._v(" 6.5 类的静态方法(类方法)")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("静态方法通常用于定义直接使用类来执行的方法，不需要有类的实例，使用 static 关键字来定义：")]),t._v(" "),n("p",[t._v("Function.prototype.money = 100\nclass Person {\nstatic getMoney() {\nconsole.log(this.money)\n}\n}")]),t._v(" "),n("p",[t._v("Person.getMoney() //100\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("这里给大家留两个问题")]),t._v(" "),n("ul",[n("li",[t._v("第一：静态方法中的 this 指向谁")]),t._v(" "),n("li",[t._v("第二： Person 作为对象身份，它的隐式原型是谁")])])])]),t._v(" "),n("h3",{attrs:{id:"_6-6-类实现继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-类实现继承"}},[t._v("#")]),t._v(" 6.6 类实现继承")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("class Person {}\n\nclass Student extends Person {}\n复制代码\n")])])]),n("ul",[n("li",[t._v("对你没有看错，两行代码就实现了以前 ES5 以前的一系列繁琐的操作，很容易实现了继承。")]),t._v(" "),n("li",[t._v("在 ES6 中新增了使用 extends 关键字，可以方便的帮助我们实现继承")]),t._v(" "),n("li",[t._v("即 "),n("code",[t._v("Sub extend Super")])])]),t._v(" "),n("h3",{attrs:{id:"_6-7-类继承初体验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-类继承初体验"}},[t._v("#")]),t._v(" 6.7 类继承初体验")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("class Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n\n  running() {\n    console.log('running!!!')\n  }\n}\n\nclass Student extends Person {\n  constructor(name, age, sno) {\n    super(name, age)\n    this.sno = sno\n  }\n\n  studying() {\n    console.log('studying!!!')\n  }\n}\n\nconst s1 = new Student('ice', 22, 200010)\n\nconsole.log(s1)\ns1.running()\ns1.studying()\n\n// Student { name: 'ice', age: 22, sno: 200010 }\n// running!!!\n// studying!!!\n复制代码\n")])])]),n("ul",[n("li",[n("p",[t._v("我们会发现在上面的代码中我使用了一个 super 关键字，这个 super 关键字有不同的使用方式：")])]),t._v(" "),n("li",[n("p",[t._v("注意：在子（派生）类的构造函数中使用 this 或者返回默认对象之前，必须先通过 super 调用父类的构造函数！")])]),t._v(" "),n("li",[n("p",[t._v("super 的使用位置有三个：子类的构造函数、实例方法、静态方法")]),t._v(" "),n("p",[t._v("class Person {\nconstructor(name, age) {\nthis.name = name\nthis.age = age\n}")]),t._v(" "),n("p",[t._v("running() {\nconsole.log('person running!!!')\n}\n}")]),t._v(" "),n("p",[t._v("class Student extends Person {\nstuRunning() {\n//调用父类的方法\nsuper.running()\n}\n}")]),t._v(" "),n("p",[t._v("const s1 = new Student()\ns1.stuRunning()")]),t._v(" "),n("p",[t._v("//person running!!!\n复制代码")])]),t._v(" "),n("li",[n("p",[t._v("静态方法调用就不演示了，想演练的可以自己尝试一下，都比较简单就是 API 调用而已。")])])]),t._v(" "),n("h3",{attrs:{id:"_6-8-继承内置类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-继承内置类"}},[t._v("#")]),t._v(" 6.8 继承内置类")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("class ICEArray extends Array {\n  lastItem() {\n    return this[this.length - 1]\n  }\n}\n\nconst arr = new ICEArray(1, 2, 3)\nconsole.log(arr.lastItem()) //3\n复制代码\n")])])]),n("ul",[n("li",[t._v("继承字内置 Array 类，调用"),n("code",[t._v("lastItem")]),t._v("，每次获取最后一个元素。")])]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7147159884658638856#",target:"_blank",rel:"noopener noreferrer"}},[t._v("摘自"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=e.exports}}]);